/*
	BongTVLive.com Hot Tub 2.0 beta6 by b0nghitter
*/

//trace("Application->  Loading...");



load("UserManager.asc");
load("ChatManager.asc");
load("MediaManager.asc");
load("AdminManager.asc");



application.onAppStart = function()
{
	application.allowDebug = false;
	
	trace("Application.onAppStart-> "+application.name+" started at "+new Date()+"\t\tallowDebug: "+application.allowDebug);
	//trace("Application.onAppStart-> this: "+this);
	
	/*userManager = new UserManager();
	chatManager = new ChatManager();
	mediaManager = new MediaManager();
	adminManager = new AdminManager();*/
	
	this.userManager = new UserManager();
	this.chatManager = new ChatManager();
	this.mediaManager = new MediaManager();
	this.adminManager = new AdminManager();
}


application.onAppStop = function(info)
{
	trace("application.onAppStop> called at "+new Date()+"  info: "+info.code);
	
	// kick all users with a warning
	// TODO
	
	// cancel the staleCloneCheckInterval
	clearInterval(this.userManager.staleCloneCheckInterval);
	
	this.userManager.clearGuestIgnores();
	this.adminManager.saveBannedUsers();
	this.adminManager.saveBlockedUsers();
	
	info = null;
	
    return true; //Garbage-collect this app
}


// Server-side action taken upon connect request.
application.onConnect = function(client, params)
{
	// set the Client objects clientID property 
	// to the client.id unique string from the server.
	client.clientID = client.id.toString();
	
	trace("Application.onConnect->  <CONNECTING>  "+
												"  id: "+client.id+
												"  clientID: "+client.clientID+
												"  IP: "+client.ip+
												"  agent: "+client.agent+
												"  pageUrl: "+client.pageUrl+
												"  referrer: "+client.referrer+
												"  protocol: "+client.protocol+
												(client.protocolVersion ? "  protocolVersion: "+client.protocolVersion : "")+
												(client.nearID ? "  nearID: "+client.nearID : "")+
												(client.farID ? "  farID: "+client.farID : "")+
												(client.nearNonce ? "  nearNonce: "+client.nearNonce : "")+
												(client.farNonce ? "  farNonce: "+client.farNonce : "")+
												(params ?
												(params.browserVersion ? "  browserVersion: "+params.browserVersion : "")+
												(params.version ? "  version: "+params.version : "")+
												(params.userName ? "  userName: "+params.userName : "") : ''));
	
	application.userManager.connectUser(client, params);
	
	params = null;
	client = null;
	
	//application.gc();
}


application.onDisconnect = function(client)
{
	trace("Application.onDisconnect->  client: "+client+"  client.id: "+client.id+"  clientID: "+client.clientID+"  IP: "+client.ip);
	
	application.userManager.removeUser(client);
	
	client = null;
	
	//application.gc();
}


application.onPublish = function(client, streamObj)
{
	trace("Application.onPublish->  client: "+client+"  clientID: "+client.id+"  streamName: "+streamObj.name+"  queryString: "+streamObj.publishQueryString);
	
	this.mediaManager.onPublish(client, streamObj);
	
	streamObj = null;
	client = null;
}


application.onUnpublish = function(client, streamObj)
{
	trace("Application.onUnpublish->  client: "+client+"  clientID: "+client.id+"  streamName: "+streamObj.name+"  queryString: "+streamObj.publishQueryString);
	
	this.mediaManager.onUnpublish(client, streamObj);
	
	streamObj = null;
	client = null;
}






// BEWARE:
// the Client.prototypes appear as properties of ghosted 
// application.userManager.users["user_"+cmdObj.userID]'s.
Client.prototype.adminCmd = function(cmdObj)
{
	var clientObj = application.userManager.users["user_"+cmdObj.userID];
	
	trace("Application.adminCmd->  cmd: "+cmdObj.cmd+"  userID: "+cmdObj.userID+"  userName: "+clientObj.userName+"  selectedUserID: "+cmdObj.selectedUserID+"  adminType: "+clientObj.adminType);
	
	cmdObj.msg = "/"+cmdObj.cmd.toLowerCase()+" "+cmdObj.reason;
	
	// if it is an admin only command
	if ((cmdObj.cmd=="setmod"||
		cmdObj.cmd=="gag"||
		cmdObj.cmd=="ungag"||
		cmdObj.cmd=="kick"||
		cmdObj.cmd=="ban"||
		cmdObj.cmd=="unban"||
		cmdObj.cmd=="banlist"||
		cmdObj.cmd=="fixblocks"||
		cmdObj.cmd=="banip"||
		cmdObj.cmd=="getip"||
		cmdObj.cmd=="guests"||
		cmdObj.cmd=="shutdown"||
		cmdObj.cmd=="debug") && 
		(clientObj.adminType=="sa"||
		clientObj.adminType=="ga"||
		clientObj.adminType=="rh"||
		clientObj.adminType=="ra"||
		clientObj.adminType=="rm"))
	{
		application.adminManager.adminCmd(cmdObj);
	// else if it is a public command that is handled by adminManager
	} else if (cmdObj.cmd=="whois"||
				cmdObj.cmd=="stats"||
				cmdObj.cmd=="version"||
				cmdObj.cmd=="ignore"||
				cmdObj.cmd=="unignore"||
				cmdObj.cmd=="blocklist"||
				cmdObj.cmd=="me"||
				cmdObj.cmd=="kick")
	{
		application.adminManager.adminCmd(cmdObj);
	}
	
	cmdObj = null;
}



Client.prototype.getBlockedUsers = function(clientID)
{
	application.userManager.getBlockedUsers(clientID);
	
	clientID = null;
}

