/*
BongTVLive.com Hot Tub 2.0 beta6 by b0nghitter
*/
//trace("|###| ChatManager |###|>  Loading...");



function ChatManager()
{
	trace("|###| ChatManager |###|>  Loaded!");
}


// send a message to all others participating in the chat session
ChatManager.prototype.sendMessage = function(msgObj) 
{
	var userObj = application.userManager.users["user_" + msgObj.userID];
	var parsedMsg = parseOutHTML(msgObj.msg);
	msgObj.msg = parsedMsg;
	
	if (msgObj.clientID != userObj.clientID) return; // anti-spoof
	if (userObj.isGagged) return; // check gagged first so you dont check flooders
	if (!floodControlCheck(msgObj.userID, msgObj.msg)) return; // anti-flood
	
	application.userManager.users["user_"+msgObj.userID].lastChatMessageTime = new Date().valueOf();
	application.userManager.users["user_"+msgObj.userID].lastChatMessage = parsedMsg;
	
	if (msgObj.msg.length <= 350)
	{
		msgObj.isAdminMessage = false;
		msgObj.isDebugMessage = false;
		
		msgObj.userID = userObj.userID;
		msgObj.userName = userObj.userName;
		msgObj.acctID = userObj.acctID;
		msgObj.acctName = userObj.acctName;
		msgObj.nonDuplicateName = userObj.nonDuplicateName;
		msgObj.roomName = userObj.roomName;
		
		var lastChatMessageTime = userObj.lastChatMessageTime;
		var lastChatMessage = userObj.lastChatMessage;
		
		var debugMsg = "ChatManager.sendMessage->  clientID: "+msgObj.clientID+"  acctID: "+msgObj.acctID+"  userID: "+msgObj.userID+"  userName: "+msgObj.userName+"  roomName: "+msgObj.roomName;
		
		if (application.adminManager.verboseDebug)
			debugMsg += "  msg: "+msgObj.msg;
		
		if (msgObj.msg.charAt(0) == "/")
		{
			var firstword = msgObj.msg.toLowerCase().split(" ",1)[0];
			
			if ((userObj.adminType.toLowerCase() != "notadmin") ||
				(firstword == "/version" ||
				firstword == "/me" ||
				firstword == "/whois" ||
				firstword == "/stats" ||
				firstword == "/kick"))
			{
				application.adminManager.adminCmd(msgObj);
			}
			
			firstword = null;
		} else {
			// replace the clientID with the userID before it goes to other clients
			msgObj.clientID = msgObj.userID;
			application.broadcastMsg("receiveMessage", msgObj);
		}
		
		trace(debugMsg);
		
		debugMsg = null;
		lastChatMessageTime = null;
		lastChatMessage = null;
	}
	
	parsedMsg = null;
	userObj = null;
	msgObj = null;
}


ChatManager.prototype.sendPrivateMessage = function(userID, msgObj) 
{
	var userObj = application.userManager.users["user_" + msgObj.userID];
	
	// anti-spoof
	if (msgObj.clientID != userObj.clientID) return;

	if ((msgObj.msg.length<=350)&&(msgObj.toUserID))
	{
		msgObj.fromUserName = userObj.userName;
		trace("|###| ChatManager.sendPrivateMessage |###|>  userID: "+userID+"  fromUserID: "+msgObj.fromUserID+"  fromUserName: "+msgObj.fromUserName+"  toUserID: "+msgObj.toUserID+"  toUserName: "+msgObj.toUserName+"  msg: "+msgObj.msg);
		msgObj.userID = userID;
		msgObj.msg = parseOutHTML(msgObj.msg);
		if (userID == msgObj.fromUserID)
		{
			// message from the original sender
			application.userManager.users["user_"+msgObj.toUserID].call("receivePrivateMessage", null, msgObj);
		} else {
			// message to the original sender
			application.userManager.users["user_"+msgObj.fromUserID].call("receivePrivateMessage", null, msgObj);
		}
	}
	
	userID = null;
	msgObj = null;
}






//function to format HTML from the message
function parseOutHTML(str)
{
	//get rid of all brackets that a user might have put in
	do{
		str = str.replace(/</, "&lt;");
	}
	while(str.indexOf("<") != -1);
	
	do{
		str = str.replace(/>/, "&gt;");
	}
	while(str.indexOf(">") != -1);
	
	// block &#xa;
	do{
		str = str.replace("&#","");
	}
	while(str.indexOf("&#") != -1);
	
	str = str.replace(/(https:\/\/|http:\/\/|www\.)\S*\.\S*\b/gi, parseURL);
	
	return str;
}


//function to create URL strings
function parseURL(str)
{
	// if the link doesnt yet contain http(s)://
	if ((str.toLowerCase().indexOf("http://") == -1) &&
		(str.toLowerCase().indexOf("https://") == -1))
	{
		str = "http://" + str;
	}
	
	// wrap the URL in HTML for the client
	str = '<font color="#0000FF"><u><a href="' + str + '" target="_blank">' + str + '</a></u></font>';
	
	return str;
}


//function to create the URL string
function floodControlCheck(userID, msg)
{
	var chatFloodWarnings = application.userManager.users["user_"+userID].chatFloodWarnings;
	var chatFloodWaitTime = application.userManager.users["user_"+userID].chatFloodWaitTime;
	var lastChatMessageTime = application.userManager.users["user_"+userID].lastChatMessageTime;
	var lastChatMessage = application.userManager.users["user_"+userID].lastChatMessage;
	var chatFloodRepeatCount = application.userManager.users["user_"+userID].chatFloodRepeatCount;
	
	if (lastChatMessageTime == 0) return true; // new connection
	
	// if the clients lastChatMessageTime 
	// is less than 'time' milliseconds
	var now = new Date().valueOf();
	var diff = now - lastChatMessageTime;
	var msgObj = new Object();
	
	if (lastChatMessage == msg)
	{
		chatFloodRepeatCount++;
		application.userManager.users["user_"+userID].chatFloodRepeatCount++;
		
		if (chatFloodRepeatCount >= 3)
		{
			msgObj.msg = "WARNING! Please do not spam.";
			
			application.userManager.users["user_"+userID].call("showAdminMessage", null, msgObj);
			
			return false;
		}
	} else {
		chatFloodRepeatCount = 0;
		application.userManager.users["user_"+userID].chatFloodRepeatCount = 0;
	}
	
	trace('floodControlCheck->  now: '+now+'  diff: '+diff+'  lastChatMessageTime: '+lastChatMessageTime+'  chatFloodRepeatCount: '+chatFloodRepeatCount+'  chatFloodWaitTime: '+chatFloodWaitTime+'  lastChatMessage: '+lastChatMessage+'  msg: '+msg);
	
	// if theres less than X warnings,
	// and they have waited past the chatFloodWaitTime
	if ((chatFloodWarnings <= 2) && (diff > chatFloodWaitTime)) {
		// clear the warnings
		application.userManager.users["user_"+userID].chatFloodWarnings = 0;
		application.userManager.users["user_"+userID].chatFloodWaitTime = 1000;
		//trace("1");
		return true;
	} else if ((chatFloodWarnings >= 2) && (diff > chatFloodWaitTime)) {
		// else if maxAllowedFloodWarnings was exceeded,
		// but the user waited the chatFloodWaitTime,
		// clear the warnings
		application.userManager.users["user_"+userID].chatFloodWarnings = 0;
		application.userManager.users["user_"+userID].chatFloodWaitTime = 1000;
		//trace("2");
		return true;
	} else if (diff < chatFloodWaitTime) {
		// else if the user did not wait the chatFloodWaitTime,
		// warn
		chatFloodWarnings++;
		application.userManager.users["user_"+userID].chatFloodWarnings++; // raise the warning count
		
		// TODO:
		// check the number of warnings and increase the wait time/gag accordingly
		chatFloodWaitTime = chatFloodWaitTime + 1000;
		application.userManager.users["user_"+userID].chatFloodWaitTime = chatFloodWaitTime; // add a second to the wait time
		
		msgObj.msg = "WARNING! Flood detected! Please wait "+(chatFloodWaitTime/1000)+" second" + (chatFloodWaitTime > 1000 ? "s" : "") + ".";
		//msgObj.msg += "* Admin:  Your current version:  "+adminObj.version;
		
		application.userManager.users["user_"+userID].call("showAdminMessage", null, msgObj);
		
		//trace("3");
		return false;
	}
	
	msgObj = null;
	return false;
}





