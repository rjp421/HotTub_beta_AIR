// TEST
//trace("|###| TestBot |###->  Loading...");



function TestBot(botID, botPrefix, adminAcctID)
{
	this.localBotID = botID;
	this.botLocalUserID = 0;
	this.botLocalClientID = 0;
	this.adminAcctID = adminAcctID;
	this.botLocalUserName = botPrefix;
	this.botPrefix = botPrefix;
	
	this.botSessionToken = String(new Date().time/1000000000).split(".")[1] + "_" + Math.round(Math.random()*999);
	
	this.usersSO = null;
	this.mediaSO = null;
	this.numStreams = 0;
	this.streams = new Object();
	
	trace("|###| TestBot |###->  Loaded!\t botPrefix: "+this.botPrefix+"  adminAcctID: "+this.adminAcctID+"  botSessionToken: "+this.botSessionToken+"  botID: "+this.localBotID);
	
	this.nc = new NetConnection();
	
	this.nc.onStatus = function(info)
	{
		trace("|###| TestBot |###->  <nc.onStatus>  level: "+info.level+"  description: "+info.description+"  code: "+info.code);
		
		if (info.code == "NetConnection.Connect.Success")
		{
			trace("|###| TestBot |###->  CONNECTED!");
		} else {
			trace("|###| TestBot |###->  NOT CONNECTED!  <"+info.code+">");
		}
		
		info = null;
	};
	
	/********************************** nc.client **************************************/
	
	// TODO:
	// connect and get userID & clientID,
	// and play everybodies cams to suck bandwidth
	
	this.nc.setUserID = function(clientID, acctID, userID, userName)
	{
		trace("TestBot.NetConnectionClient.setUserID->  clientID: "+clientID+"  acctID: "+acctID+"  userID: "+userID+"  userName: "+userName+"  botObj: "+getBotFromClientID(clientID));
		
		// set temp properties on the NetConnection
		this.botLocalClientID = clientID;
		this.adminAcctID = acctID;
		this.botLocalUserID = userID;
		this.botLocalUserName = userName;
		
		for (var x in application.adminManager.bots)
		{
			var botObj = application.adminManager.bots[x];
			
			if ((botObj.nc.botLocalClientID == clientID) &&
				(botObj.nc.botLocalClientID != botObj.botLocalClientID))
			{
				botObj.initBot();
				
				break;
			}
			
			botObj = null;
			x = null;
		}
		
		userName = null;
		userID = null;
		acctID = null;
		clientID = null;
	}
	
	
	this.nc.onBWCheck = function(dataChunk)
	{
		return 0;
	}
	
	
	this.nc.onBWDone = function(bandwidth)
	{
		trace("Bandwidth from server to client is: " + bandwidth + " Kbps");
	}
	
	
	/***********************************************************************************/
	
	
	
	
	var params = new Object();
	params.roomName = "lobby";
	params.userName = parseOutHTML(this.botPrefix);
	params.password = "";
	params.defaultQuality = "hd";
	params.version = "30923201301";
	params.isBot = true;
	
	//this.nc.connect("rtmp://media.whohacked.me/tub2010_server/lobby", params);
	this.nc.connect("rtmp://192.168.10.104/tub2010_server/lobby", params);
	
	params = null;
	adminAcctID = null;
	botPrefix = null;
}


TestBot.prototype.initBot = function()
{
	this.botLocalClientID = this.nc.botLocalClientID;
	this.adminAcctID = this.nc.adminAcctID;
	this.botLocalUserID = this.nc.botLocalUserID;
	this.botLocalUserName = this.nc.botLocalUserName;
	
	// nullify temp NetConnection properties
	this.nc.botLocalClientID = null;
	this.nc.adminAcctID = null;
	this.nc.botLocalUserID = null;
	this.nc.botLocalUserName = null;
	
	this.usersSO = SharedObject.get("users", false, this.nc);
	
	this.usersSO.onSync = function(list)
	{
		trace("TestBot.usersSO.onSync ->  list: "+list+"  this: "+this);
		
		onUsersSOSync(list);
		
		list = null;
	};
	
	this.usersSO.onStatus = function(infoObj)
	{
		trace("TestBot.usersSO.onStatus->  level: "+infoObj.level+"  code: "+infoObj.code);
		
		infoObj = null;
	};
	
	this.mediaSO = SharedObject.get("media", false, this.nc);
	
	this.mediaSO.onSync = function(list)
	{
		trace("TestBot.mediaSO.onSync ->  list: "+list+"  this: "+this);
		
		list = null;
	};
	
	this.mediaSO.onStatus = function(infoObj)
	{
		trace("TestBot.mediaSO.onStatus->  level: "+infoObj.level+"  code: "+infoObj.code);
		
		infoObj = null;
	};
	
	// check for and play users with their video on
	for (var i in application.userManager.users)
	{
		var clientObj = application.userManager.users[i];
		
		if (clientObj.isUsersVideoOn)
		{
			// play the stream
			trace("TestBot.initBot->  <bot_"+this.localBotID+":"+this.botLocalUserName+">  <USERS VIDEO IS ON, PLAYING THE STREAM>  userName: "+clientObj.userName+"  streamName: user_"+clientObj.userID);
			
			var streamName = "user_"+clientObj.userID;
			this.streams[streamName] = Stream.get(streamName+"_botStream_"+this.localBotID);
			this.numStreams++;
			
			tmpStream.play(streamName, -1, -1, true, this.nc);
			
			if (this.streams[streamName])
			{
				this.streams[streamName].onStatus = function(info)
				{
					trace("TestBot.Stream.onStatus->  <bot_"+this.localBotID+":"+this.botLocalUserName+">  level: "+info.level+"  code: "+info.code);
					
					info = null;
				};
			}
			
			streamName = null;
		}
		
		clientObj = null;
	}
	
	trace("TestBot.initBot-> <COMPLETED>  <bot_"+this.localBotID+":"+this.botLocalUserName+">  nc: "+this.nc+"  usersSO: "+this.usersSO+"  streams.length: "+this.streams.length);
	
	var names = this.usersSO.getPropertyNames();
	
	for (x in names)
	{
		var propVal = this.usersSO.getProperty(names[x]);
		trace("TestBot.initBot->  [usersSO]  " + names[x] + " = " + propVal);
	}
	
	propVal = null;
	x = null;
	
	i = null;
}


function onUsersSOSync(list)
{
	trace("TestBot.onUsersSOSync->  userList.length: "+list.length);
	
	for (var i = 0; i < list.length; i++)
	{
		var tmpObj = list[i];
		
		switch (tmpObj.code)
		{
			case "success":
				trace ("success");
				break;
			case "change":
				trace ("change");
				break;
			case "reject":
				trace ("reject");
				break;
			case "delete":
				trace ("delete");
				break;
			case "clear":
				trace ("clear");
				break;
		}
		
		if (tmpObj.isUsersVideoOn)
		{
			trace("TestBot.onUsersSOSync->  isUsersVideoOn: "+tmpObj.isUsersVideoOn);
		} else {
			trace("TestBot.onUsersSOSync->  isUsersVideoOn: "+tmpObj.isUsersVideoOn);
		}
	}
	
	list = null;
}


TestBot.prototype.onBWCheck = function(dataChunk)
{
	trace("TestBot.NetConnectionClient.onBWCheck->  CALLED");
	
	return 0;
}


TestBot.prototype.onBWDone = function(bitrate)
{
	trace("TestBot.NetConnectionClient.onBWDone->  BANDWIDTH = "+bitrate+"Kbps");
}


TestBot.prototype.loginFail = function(reason)
{
	trace("TestBot.NetConnectionClient.loginFail->  LOGIN FAILED  reason: "+reason);
	
	reason = null;
}


TestBot.prototype.receiveMessage = function(msgObj)
{
	msgObj = null;
}


TestBot.prototype.receivePrivateMessage = function(msgObj)
{
	msgObj = null;
}


TestBot.prototype.receiveBannedUsers = function(bannedUsersObj)
{
	trace("TestBot.NetConnectionClient.receiveBannedUsers->  bannedUsersObj: "+bannedUsersObj);
	
	bannedUsersObj = null;
}


TestBot.prototype.showAdminMessage = function(msgObj)
{
	trace("TestBot.NetConnectionClient.showAdminMessage->  msgObj: "+msgObj+"  msg: "+msgObj.msg);
	
	msgObj = null;
}


TestBot.prototype.kicked = function(tmpObj)
{
	trace("TestBot.NetConnectionClient.kicked->  msgObj: "+tmpObj+"  msg: "+tmpObj.msg);
	
	tmpObj = null;
}


TestBot.prototype.banned = function(tmpObj)
{
	tmpObj = null;
}


TestBot.prototype.ignoredUser = function(ignoreInfo)
{
	ignoreInfo = null;
}


TestBot.prototype.unignoredUser = function(ignoreInfo)
{
	ignoreInfo = null;
}


TestBot.prototype.getUserIP = function(ip)
{
	ip = null;
}


TestBot.prototype.onGetUserPropertyResult = function(resultObj)
{
	trace("TestBot.NetConnectionClient.onGetUserPropertyResult->  resultObj: "+resultObj+"  ok: "+resultObj.ok+"  status: "+resultObj.status+"  resultAdminType: "+resultObj.resultAdminType);
	
	tmpObj = null;
}


TestBot.prototype.onSetUserPropertyResult = function(resultObj)
{
	trace("TestBot.NetConnectionClient.onSetUserPropertyResult->  resultObj: "+resultObj+"  ok: "+resultObj.ok+"  status: "+resultObj.status);
	
	tmpObj = null;
}




function close()
{
}







function getBotFromClientID(clientID)
{
	if (!clientID) return;
	
	var returnObj = null;
	
	trace("TestBot.getBotFromClientID->  clientID: "+clientID);
	
	for (var i in application.adminManager.bots)
	{
		var botObj = application.adminManager.bots[i];
		
		if ((botObj.botLocalClientID == clientID) ||
			(botObj.nc.botLocalClientID == clientID))
		{
			trace("TestBot.getBotFromClientID->  clientID: "+botObj.botLocalClientID+"  userName: "+botObj.botLocalUserName);
			
			returnObj = botObj;
			
			break;
		}
		
		botObj = null;
		i = null;
	}
	
	//trace("TestBot.getBotFromClientID-> RETURNING returnObj: "+returnObj);
	
	return returnObj;
}

