/*
BongTVLive.com Hot Tub 2.0 beta6 by b0nghitter
*/


//trace("|###| UserManager |###|>  Loading...");



function UserManager()
{
	trace("["+new Date().toString()+"]  UserManager->  Loaded!");
	
	this.userID = 0; // a number that increases with each new successful connection
	this.userCount = 0; // current client count
	this.userLimit = 0;
	
	this.users = new Object(); // an object with a reference to each client
	//this.clients = new Object();
	
	this.usersSO = SharedObject.get("users", false);
	this.versionSO = SharedObject.get("version", true);
	
	if ((!this.versionSO.getProperty("version")) || 
		(this.versionSO.getProperty("version") < 30205201501))
	{
		this.versionSO.setProperty("version", 30205201501);
		this.versionSO.setProperty("beta", 40205201501);
	}
	
	// TEST:
	// 10 min (60 sec) interval in ms to check for leftover userList items, etc
	this.staleCloneCheckInterval = setInterval(staleCloneCheck, 60000/**/);
	
	
	/*
	* 
	* TODO:
	* 
	* implement ZendAMF authentication
	* instead of LoadVars
	* 
	*
	this.webAMFEndpointURI = "http://www.toketub.tv/login/amf/"; // try HTTPS
	
	this.webAMFAuthNC = new NetConnection();
	this.webAMFAuthNC.onStatus = function(info)
	{
		trace("["+new Date()+"]  webAMFAuthNC.onStatus->  code: " + info.code);
		
		switch (info.code)
		{
			case "NetConnection.Connect.Success":
				if (application.userManager.webAMFAuthNC.isConnected)
				{
					trace("["+new Date()+"]  webAMFAuthNC.onStatus->  CALLING  <AMFLoginService.loginUser>  webAMFAuthNC: " + this);
					
					application.userManager.webAMFAuthNC.call("AMFLoginService.loginUser", application.userManager.webAMFLoginResultHandler());
				}
				break;
			default:
				trace("["+new Date()+"]  webAMFAuthNC.onStatus->  [UNHANDLED]  " + info.code);
		}
	};
	
	trace("["+new Date()+"]  UserManager->  <CONNECTING>  webAMFAuthNC: " + this.webAMFAuthNC + "  webAMFEndpointURI: " + this.webAMFEndpointURI);
	
	// connect to the ZendAMF endpoint
	this.webAMFAuthNC.connect(this.webAMFEndpointURI);
	*/
}

/*
UserManager.prototype.webAMFLoginResultHandler = function()
{
	trace("["+new Date()+"]  UserManager.webAMFLoginResultHandler->  ");
	
	this.onResult = function(res)
	{
		trace("["+new Date()+"]  webAMFLoginResultHandler.onResult->  result: " + res);
	}
	this.onStatus = function(info)
	{
		trace("["+new Date()+"]  webAMFLoginResultHandler.onStatus->  Failed with code: " + info.code);
	}
}
*/

// called from Application.onConnect
UserManager.prototype.connectUser = function(client, params)
{
	var banObj = application.adminManager.isUserBanned(client.ip);
	var currentConnectionsFromIP = this.getNumberOfConnectionsFromIP(client.ip);
	var err = new Object();
	
	//check if the client is using an insecure protocol, has a blank login, or has an old version
	if (//client.protocol == "rtmp" ||
		//client.protocol == "rtmpt" ||
		//client.protocol == "rtmfp" ||
		(params.userName.length == 0) ||
		// invalid room name
		((params.roomName.toLowerCase() != 'lobby') &&
		(params.roomName.toLowerCase() != 'pufftuff') &&
		(params.roomName.toLowerCase() != '420radio') &&
		(params.roomName.toLowerCase() != 'walkingdead') &&
		(params.roomName.toLowerCase() != 'testingcles')) ||
		// old version
		(((params.version.toString().charAt(0)=='3') && 
			(params.version < this.versionSO.getProperty("version"))) ||
			((params.version.toString().charAt(0)=='4') && 
			(params.version < this.versionSO.getProperty("beta")))) ||
		// too many connections
		(currentConnectionsFromIP > 5) ||
		// banned
		(banObj))
	{
		if (banObj)
		{
			// banned
			trace("Login Failed>  <BANNED>  userName: "+params.userName+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
			application.acceptConnection(client);
			
			client.call("banned", null, banObj);
			
			client.kickInterval = setInterval(application.adminManager.kickOutUser, 1000, client);
		} else if (currentConnectionsFromIP > 5) {
			// too many connections
			trace("Login Failed>  <TOO MANY CONNECTIONS>  userName: "+params.userName+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
			
			// TODO
			//err.code = 'Too many connections!';
			
			// any other reason
			//application.rejectConnection(client, err);
			
			application.acceptConnection(client);
			
			client.call("loginFail", null, "toomanyconnections");
			
			client.kickInterval = setInterval(application.adminManager.kickOutUser, 1000, client);
		} else if (!params.userName) {
			// login failed - missing userName
			trace("Login Failed>  <MISSING USERNAME>  userName: "+params.userName+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
			application.acceptConnection(client);
			
			client.call("loginFail", null, "failed");
			
			client.kickInterval = setInterval(application.adminManager.kickOutUser, 1000, client);
		}
		else if (((params.version.toString().charAt(0)=='3') && 
					(params.version < this.versionSO.getProperty("version"))) ||
					((params.version.toString().charAt(0)=='4') && 
					(params.version < this.versionSO.getProperty("beta"))))
		{
			// old version
			trace("Login Failed>  <OLD VERSION>  userName: "+params.userName+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
			application.acceptConnection(client);
			
			client.call("loginFail", null, "version");
			
			client.kickInterval = setInterval(application.adminManager.kickOutUser, 1000, client);
		}
		else if ((params.roomName.toLowerCase() != 'lobby') &&
					(params.roomName.toLowerCase() != 'pufftuff') &&
					(params.roomName.toLowerCase() != '420radio') &&
					(params.roomName.toLowerCase() != 'walkingdead') &&
					(params.roomName.toLowerCase() != 'testingcles'))
		{
			trace("Login Failed>  <INVALID ROOMNAME>  userName: "+params.userName+"  roomName: "+params.roomName.toLowerCase()+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
			err.code = 'Invalid room name!';
			
			application.rejectConnection(client, err);
		// any other reason
		} else {
			trace("Login Failed>  <UNDEFINED ERROR>  userName: "+params.userName+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
			err.code = 'Undefined error!';
			
			// any other reason
			application.rejectConnection(client, err);
		}
	} else {
		// else if everything is normal
		trace("|###| UserManager.connectUser |###|>  userName: "+params.userName+"  version: "+params.version+"  clientID: "+client.id+"  IP: "+client.ip+"  currentConnectionsFromIP: "+currentConnectionsFromIP);
		
		application.userManager.userLogin(client, params);
	}
			
	err = null;
	currentConnectionsFromIP = null;
	banObj = null;
	params = null;
	client = null;
}


UserManager.prototype.userLogin = function(client, params)
{
	if (params.password)
	{
		
		var loadLoginVars = new LoadVars();
		var result_lv = new LoadVars();
		var url = "";
		
		//if (params.roomName == "pufftuff")
		//{
		//	url = "http://pufftuff.toketub.tv/login/tub2010.php";
		//} else if (params.roomName == "420radio") {
		//	url = "http://toketub.tv/login/tub2010.php";
		//} else {
			url = "http://www.toketub.tv/login/tub2010.php";
		//}
		
		trace("["+new Date()+"]  UserManager.userLogin->  <LOGGING IN>  authURL: " + url);
		
		loadLoginVars.sendRequest = "log_user_in";
		loadLoginVars.parm1 = params.userName;
		loadLoginVars.parm2 = params.password;
		loadLoginVars.parm3 = client.ip.toString();
		
		loadLoginVars.sendAndLoad(url, result_lv, "POST");
		
		result_lv.onLoad = function(success)
		{
			if (result_lv.ok != 0)
			{
				trace("["+new Date()+"]  UserManager.userLogin>  <SUCCESS>  ok: "+result_lv.ok+"  acctid: "+result_lv.acctid+"  acctname: "+result_lv.acctname+"  chatname: "+result_lv.chatname+"  admintype: "+result_lv.admintype+"  banned: "+result_lv.banned);
			}
			
			//trace("###result_lv.onLoad###>  result_lv: "+result_lv.toString()+"  loaded: "+loadLoginVars.loaded+"  success: "+success);
			//trace("###result_lv.status###>  "+result_lv.status);
			//trace("###result_lv.ok###>  "+result_lv.ok);
			//trace("###result_lv.acctid###>  "+result_lv.acctid);
			//trace("###result_lv.acctname###>  "+result_lv.acctname);
			//trace("###result_lv.chatname###>  "+result_lv.chatname);
			//trace("###result_lv.admintype###>  "+result_lv.admintype);
			//trace("###result_lv.banned###>  "+result_lv.banned);
			//trace("###result_lv.session_token###>  "+result_lv.session_token);
			//trace("###result_lv.streamkey_token###>  "+result_lv.streamkey_token);
			if (result_lv.ok == 1)
			{
				//trace("Login Sucessful>  acctname: "+parseOutHTML(result_lv.acctname));
				
				//parse out HTML from user names
				params.acctID = result_lv.acctid;
				params.acctName = parseOutHTML(result_lv.acctname);
				params.userName = parseOutHTML(result_lv.chatname);
				params.sex = result_lv.gender.toLowerCase();
				params.banned = result_lv.banned;
				params.session_token = result_lv.session_token;
				//params.streamkey_token = result_lv.streamkey_token;
				
				// parse multi-room adminTypes
				var adminType_Str = result_lv.admintype.toString().toLowerCase();
				var adminType_Arr = null;
				
				// TEST 
				if (adminType_Str.length)
				{
					if (adminType_Str.indexOf(",") != -1)
					{
						adminType_Arr = adminType_Str.split(",");
					} else {
						adminType_Arr = new Array();
						adminType_Arr.push(adminType_Str);
					}
				}
				
				// check per-room adminTypes
				if (adminType_Arr.length)
				{
					for (var i = 0; i < adminType_Arr.length; ++i)
					{
						var tmp_Arr = adminType_Arr[i].toString().split(":");
						//trace("\t\troomName: "+tmp_Arr[0]+"\tadminType: "+tmp_Arr[1]);
						
						if (tmp_Arr[0].toLowerCase() == params.roomName.toLowerCase())
						{
							// set adminType depending on the roomName
							params.adminType = tmp_Arr[1].toLowerCase();
						}
						
						tmp_Arr = null;
					}
				}
				
				//trace("!!!!!!!!!!!!!!! adminType: "+params.adminType+"  adminType_Arr.length: "+adminType_Arr.length);
				
				// check for missing params
				if ((params.adminType != "sa") && 
					(params.adminType != "ga") && 
					(params.adminType != "rh") && 
					(params.adminType != "ra") && 
					(params.adminType != "rm"))
				{
					params.adminType = "notadmin";
				}
				
				if ((params.sex != "m") && 
					(params.sex != "f"))
				{
					params.sex = "NA";
				}
				
				// login successful
				application.userManager.addUser(client, params);
				
				adminType_Arr.splice(0, adminType_Arr.length-1);
				
				adminType_Str = null;
				adminType_Arr = null;
			} else { // if login failed - password check failed
				// login failed
				trace("["+new Date().toString()+"]  UserManager.userLogin>  <FAILED>  clientID: "+client.id+"  IP: "+client.ip+"  agent: "+client.agent+"  referrer: "+client.referrer+"  version: "+params.version+"  userName: "+params.userName);
				
				application.acceptConnection(client);
				
				client.call("loginFail", null, "failed");
				
				client.kickInterval = setInterval(application.adminManager.kickOutUser, 1000, client);
			}
			
			loadLoginVars = null;
			result_lv = null;
		} // end result_lv.onLoad
	} else { // if no password - login as a guest
		// guest login
		if (application.adminManager.guestAccessSO.getProperty("guestAccess") == true)
		{
			//trace("GUEST ACCESS IS ENABLED, ACCEPTING CONNECTION!");
			params.acctID = 0;
			params.acctName = "Guest";
			params.adminType = "notadmin";
			params.sex = "NA";
			
			application.userManager.addUser(client, params);
		} else {
			// guest access disabled
			trace("["+new Date().toString()+"]  UserManager.userLogin>  <REJECTED>  GUEST ACCESS IS DISABLED, CLOSING CONNECTION!");
			
			application.acceptConnection(client);
			
			client.call("loginFail", null, "guests");
			
			client.kickInterval = setInterval(application.adminManager.kickOutUser, 1000, client);
		}
		
		params = null;
		client = null;
	}
	
	//application.gc();
}


UserManager.prototype.addUser = function(client, params)
{
	++this.userID;
	++this.userCount;
	
	trace("["+new Date().toString()+"]  UserManager.addUser->  <ACCEPTING CONNECTION>  userName: "+params.userName+"  userID: "+this.userID+"  client: "+client+"  client.id: "+client.id+"  clientID: "+client.clientID+"  IP: "+client.ip);
	
	application.acceptConnection(client);
	
	// see if there is another user with the same name
	for (var i in this.users)
	{
		if (parseOutHTML(this.users[i].userName.toLowerCase()) == params.userName.toLowerCase())
		{
			params.userName = params.userName + "_" + this.userID;
			break;
		}
	}
	
	// set all the vars for the user
	//if (!client.clientID) 
	//	client.clientID = client.id;
	
	client.userID = this.userID;
	client.userName = parseOutHTML(params.userName);
	client.acctID = params.acctID;
	client.acctName = parseOutHTML(params.acctName);
	client.adminType = params.adminType;
	client.roomName = params.roomName;
	client.sex = params.sex;
	client.defaultQuality = params.defaultQuality;
	client.connectionProtocol = client.protocol + (client.protocolVersion.length ? ' v'+client.protocolVersion : "");
	client.version = params.version;
	
	//trace("###########------>  "+client.userName.toString().substr(0,5)+"  <------##############");
	
	var tmpNameArr = client.userName.toString().split("_");
	var isDuplicateName = ((client.userName.toString().substr(0,5) != 'Guest') && 
							(!isNaN(tmpNameArr[tmpNameArr.length - 1])));
	var nonDuplicateName = (isDuplicateName ? client.userName.toString().substr(0, client.userName.toString().lastIndexOf("_")) : client.userName);
	tmpNAmeArr = null;
	
	//client.isDuplicateName = isDuplicateName;
	client.nonDuplicateName = nonDuplicateName;
	client.isGagged = false;
	
	// TODO: make user-defined
	client.isMediaPrivate = false;
	client.voiceChatEnabled = false;
	
	client.connectStartTime = new Date();
	client.viewedByUserIDs_A = new Array();
	client.heardByUserIDs_A = new Array();
	
	// TODO:
	// user defined list of external or local
	// Streams, to allow publishing from external
	// encoders, and live transcoding to multi-bitrate
	client.userMediaStreamsPlaylist_A = new Array();
	
	client.lastChatMessageTime = 10000;
	client.lastChatMessage = '';
	client.chatFloodWarnings = 0;
	client.chatFloodWaitTime = 1000; // default 1 second
	client.chatFloodRepeatCount = 0;
	
	if (params.compatibilityInfoObj)
	{
		client.compatibilityInfoObj = params.compatibilityInfoObj;
	}
	
	// set the users array object as the original client object
	this.users["user_" + client.userID] = client;
	
	// clean params so other users cannot see client IPs etc via the SharedObject
	var cleanClient = new Object();
	//cleanClient.clientID = client.id; // TEMP
	
	cleanClient.userID = this.users["user_" + client.userID].userID;
	cleanClient.userName = this.users["user_" + client.userID].userName;
	cleanClient.acctID = this.users["user_" + client.userID].acctID;
	cleanClient.acctName = this.users["user_" + client.userID].acctName;
	cleanClient.adminType = this.users["user_" + client.userID].adminType;
	cleanClient.roomName = this.users["user_" + client.userID].roomName;
	cleanClient.defaultQuality = this.users["user_" + client.userID].defaultQuality;
	cleanClient.connectionProtocol = this.users["user_" + client.userID].connectionProtocol;
	cleanClient.version = this.users["user_" + client.userID].version;
	cleanClient.sex = this.users["user_" + client.userID].sex;
	//cleanClient.isDuplicateName = this.users["user_" + client.userID].isDuplicateName;
	cleanClient.nonDuplicateName = this.users["user_" + client.userID].nonDuplicateName;
	cleanClient.isGagged = this.users["user_" + client.userID].isGagged;
	cleanClient.voiceChatEnabled = this.users["user_" + client.userID].voiceChatEnabled;
	cleanClient.isMediaPrivate = this.users["user_" + client.userID].isMediaPrivate;
	
	cleanClient.isUsersVideoOn = false;
	cleanClient.isUsersAudioOn = false;
	
	if (client.compatibilityInfoObj)
	{
		cleanClient.compatibilityInfoObj = this.users["user_" + client.userID].compatibilityInfoObj;
	}
	
	// set the clean shared object
	this.usersSO.setProperty("user_" + client.userID, cleanClient);
	this.usersSO.flush();
	
	// send the clean client object to all the clients UserLists, isOnSync=false
	this.usersSO.send("addUser", cleanClient, false);
	
	// TODO: this is insecure, ew. fix it.
	
	// give the client access to server-side commands
	client.chatManager = application.chatManager;
	client.mediaManager = application.mediaManager;
	
	if (params.adminType=="sa"||
		params.adminType=="ga"||
		params.adminType=="rh"||
		params.adminType=="ra"||
		params.adminType=="rm")
	{
		client.adminManager = application.adminManager;
	}
	
	// send the client their clientID, acctID, userID and userName
	client.call("setUserID", null, client.id, client.acctID, client.userID, client.userName);
	
	//for (i = 0; i < application.clients.length; ++i)
	//{
	//	trace("i: "+i+"  clients[i]: "+application.clients[i]+"  clients[i].userName: "+application.clients[i].userName+"  clients[i].userID: "+application.clients[i].userID+"  clients[i].ip: "+application.clients[i].ip);
	//}
	//i = null;
	
	// loop through the clients and tell blocked users they were ignored  .informUserOfIgnoresInterval
	if (application.adminManager.userIgnores[(client.acctID==0 ? "guest_"+client.userID : "member_"+client.acctID)])
	{
		client.informUserOfIgnoresInterval = setInterval(informUserOfIgnores, 1000, client, application.adminManager.userIgnores[(client.acctID==0 ? "guest_"+client.userID : "member_"+client.acctID)]);
	}
	
	// send the user their blocked users list
	client.informIgnoredUsersInterval = setInterval(informIgnoredUsers, 1000, client);
	
	cleanClient = null;
	nonDuplicateName = null;
	params = null;
	client = null;
	
	//application.gc();
}


UserManager.prototype.getBlockedUsers = function(clientID)
{
	var tmpUserObj = application.userManager.getClientFromClientID(clientID);
	
	if (!tmpUserObj) 
		return;
	
	//var blockedUsers = new Object();
	//var blockedUserListCount = 0;
	
	// TODO:
	// return the userIgnores[member_acctID] Object,
	// call the object by its key (acctID == 0 ? guest_userID : member_acctID)
	
	if (tmpUserObj.acctID != 0)
	{
		if (application.adminManager.userIgnores["member_"+tmpUserObj.acctID])
			tmpUserObj.call("getBlockedUsersList", null, application.adminManager.userIgnores["member_"+tmpUserObj.acctID]);
	} else {
		if (application.adminManager.userIgnores["guest_"+tmpUserObj.userID])
			tmpUserObj.call("getBlockedUsersList", null, application.adminManager.userIgnores["guest_"+tmpUserObj.userID]);
	}
	
	/*
	for (var i in application.adminManager.userIgnores)
	{
		blockedUserListCount++;
		
		for (var x in application.adminManager.userIgnores[i])
		{
			var tmpUserObj = application.userManager.users["user_"+userID];
			var ignoreInfo = application.adminManager.userIgnores[i][x];
			
			if ((((ignoreInfo.whoIgnoredAcctID != 0) && 
					(ignoreInfo.whoIgnoredAcctID == tmpUserObj.acctID)) || 
					(ignoreInfo.whoIgnoredName == tmpUserObj.userName)) ||
				(((ignoreInfo.ignoredWhoAcctID != 0) && 
					(ignoreInfo.ignoredWhoAcctID == tmpUserObj.acctID)) || 
					(ignoreInfo.ignoredWhoName == tmpUserObj.userName)))
			{
				trace("UserManager.getBlockedUsers->  userID: " + userID + "  userName: " + tmpUserObj.userName + "  CALLING  <ignoredUser>  Client: " + application.userManager.users["user_" + userID] + "  ignoreInfo: " + ignoreInfo);
				
				// TEMP:
				// simulate the user being ignored
				application.userManager.users["user_" + userID].call("ignoredUser", null, ignoreInfo);
				
				//break;
			}
			
			
			//if (((application.adminManager.userIgnores[i][x].ignoredWhoAcctID != 0) && 
			//	(application.adminManager.userIgnores[i][x].ignoredWhoAcctID == tmpUserObj.acctID)) || 
			//	(application.adminManager.userIgnores[i][x].ignoredWhoName == tmpUserObj.userName))
			//{
			//	trace("UserManager.getBlockedUsers->  userID: " + userID + "  userName: " + tmpUserObj.userName + "  CALLING  <ignoredUser>  Client: " + application.userManager.users["user_" + userID]);
			//	
			//	// TEMP:
			//	// simulate the user being ignored
			//	application.userManager.users["user_" + userID].call("ignoredUser", null, application.adminManager.userIgnores[i][x]);
			//	
			//	//break;
			//}
			
			//trace("UserManager.getBlockedUsers->  userID: "+userID+"  <i:"+i+":"+application.adminManager.userIgnores[i]+">  <x:"+x+":"+application.adminManager.userIgnores[i][x]+">");
			
			ignoreInfo = null;
			tmpUserObj = null;
		}
		
		x = null;
		
		trace("UserManager.getBlockedUsers->  userID: " + userID + "  blockedUserListCount: " + blockedUserListCount + "  <i:"+i+":"+application.adminManager.userIgnores[i]+">");
	}
	
	trace("UserManager.getBlockedUsers->  userID: " + userID + "  blockedUserListCount: " + blockedUserListCount + "  <i:"+i+":"+application.adminManager.userIgnores[i]+">");
	
	i = null;
	*/
	
	tmpUserObj = null;
	//blockedUserListCount = null;
	//blockedUsers = null;
	clientID = null;
}


/*
// unblock user
UserManager.prototype.unblockUser = function(selectedUserAcctID)
{
	if (!selectedUserAcctID) return;
	
	for (var i in application.adminManager.userIgnores)
	{
		trace("UserManager.unblockUser>  selectedUserAcctID: "+selectedUserAcctID);
		
		if (application.adminManager.userIgnores[i].ignoredWhoID == selectedUserAcctID)
		{
			trace("UserMnager.unblockUser>  <UNBLOCKING>  " + application.adminManager.userIgnores[i].ignoredWhoName);
			
			application.adminManager.userIgnores[i] = null;
			delete application.adminManager.userIgnores[i];
			
			// TODO:
			//break;
		}
	}
	
	application.adminManager.userIgnoresSO.setProperty("userIgnores", application.adminManager.userIgnores);
	application.adminManager.userIgnoresSO.flush();
	
	i = null;
	selectedUserAcctID = null;
}
*/

// clear all guest ignores before restart
UserManager.prototype.clearGuestIgnores = function()
{
	var hasChanged = false;
	
	for (var i in application.adminManager.userIgnores)
	{
		// if the object key starts with guest_ or member_
		//trace("UserManager.clearGuestIgnores->  i.split()[0]: "+i.toString().split("_")[0]);
		if (i.toString().split("_")[0] == "guest")
		{
			trace("UserMnager.clearGuestIgnores->  REMOVING GUESTS IGNORES  acctID: " + i);
			
			application.adminManager.userIgnores[i] = null;
			delete application.adminManager.userIgnores[i];
			
			hasChanged = true;
		} else {
			/*
			trace("UserMnager.clearGuestIgnores->  REMOVING USERS GUEST IGNORES  acctID: " + i);
			
			for (var x in application.adminManager.userIgnores[i])
			{
				if (((application.adminManager.userIgnores[i][x].ignoredAcctID)&&(application.adminManager.userIgnores[i][x].ignoredAcctID == 0)) || 
					((application.adminManager.userIgnores[i][x].ignoredWhoAcctID)&&(application.adminManager.userIgnores[i][x].ignoredWhoAcctID == 0)))
				{
					application.adminManager.userIgnores[i][x] = null;
					delete application.adminManager.userIgnores[i][x];
					
					hasChanged = true;
				}
			}
			
			x = null;
			*/
		}
	}
	
	// save to the userIgnores Object and SharedObject
	if (hasChanged)
	{
		application.adminManager.saveBlockedUsers();
	}
	
	i = null;
	hasChanged = null;
}


// return the Client object of a user via their clientID (secure)
UserManager.prototype.getClientFromClientID = function(clientID, matchLastHalfOnly) /* returns a Client object */
{
	return getClientFromClientID(clientID, matchLastHalfOnly);
}


// return the Client object of a user via their acctID (insecure)
UserManager.prototype.getClientFromAcctID = function(acctID) /* returns a Client object */
{
	return getClientFromAcctID(acctID);
}


// return the Client object of a user via their acctName (insecure)
UserManager.prototype.getClientFromAcctName = function(acctName) /* returns a Client object */
{
	return getClientFromAcctName(acctName);
}


// return the Client object of a user via their userID (insecure)
UserManager.prototype.getClientFromUserID = function(userID) /* returns a Client object */
{
	return getClientFromUserID(userID);
}


// return the Client object of a user via their userName (insecure)
UserManager.prototype.getClientFromUserName = function(userName) /* returns a Client object */
{
	return getClientFromUserName(userName);
}


// return the number of connections from an IP (insecure)
UserManager.prototype.getNumberOfConnectionsFromIP = function(userIP) /* returns a Number */
{
	return getNumberOfConnectionsFromIP(userIP);
}


UserManager.prototype.removeUser = function(client)
{
	trace("|###| UserManager.removeUser |###|>  client: "+client+"  client.id: "+client.id+"  clientID: "+client.clientID+"  userName: "+client.userName+"  userID: "+client.userID+"  IP: "+client.ip);
	
	var clientObj = this.users["user_" + client.userID];
	
	if (clientObj)
	{
		// check if the users A/V is on and stop their stream
		if (clientObj.isUsersVideoOn)
		{
			//trace("|###| UserManager.removeUser |###|>  Users VIDEO is ON, stopping!");
			application.mediaManager.userVideoOff(client.userID);
		}
		
		if (clientObj.isUsersAudioOn)
		{
			//trace("|###| UserManager.removeUser |###|>  Users AUDIO is ON, stopping!");
			application.mediaManager.userAudioOff(client.userID);
		}
		
		if (client.acctID == 0)
		{
			// remove any saved ignores for this guest
			//trace("|###| UserManager.removeUser |###|>  User is a GUEST, removing saved ignores!!");
			removeUserIgnores(client.acctID, client.userID, false);
		}/* else {
			removeUserIgnores(client.acctID, client.userID, true);
		}*/
		/*
		// TODO: test if the SO will update on the clients
		// just from the server deleting it..
		// send removeUser to the clients
		this.usersSO.send("removeUser", {userID:client.userID, userName:client.userName});
		
		// nullify the cleanClient object from the shared object to update the userlist
		application.userManager.usersSO.setProperty("user_" + client.userID, null);
		application.userManager.usersSO.flush();
		*/
		// lower the current user count
		--this.userCount;
	}
	
	if (client.informUserOfIgnoresInterval)
		clearInterval(client.informUserOfIgnoresInterval);
	if (client.informIgnoredUsersInterval)
		clearInterval(client.informIgnoredUsersInterval);
	
	removeUserObject(client);
	
	clientObj = null;
	client = null;
	
	//application.gc();
}







// anti-clone
// separate function so it runs last in removeUser
function removeUserObject(client)
{
	trace("|###| UserManager.removeUserObject |###|>  client: "+client+"  client.id: "+client.id+"  clientID: "+client.clientID+"  userName: "+client.userName+"  userID: "+client.userID+"  IP: "+client.ip);
	
	//var cleanClient = application.userManager.usersSO.getProperty("user_" + client.userID);
	//application.userManager.usersSO.send("removeUser", cleanClient);
	application.userManager.usersSO.send("removeUser", {userID:client.userID, userName:client.userName});
	
	// nullify the cleanClient object from the shared object to update the userlist
	application.userManager.usersSO.setProperty("user_" + client.userID, null);
	application.userManager.usersSO.flush();
	
	// remove the Client object from the users[] array
	if (application.userManager.users["user_" + client.userID])
	{
		if (application.userManager.users["user_" + client.userID].compatibilityInfoObj)
		{
			application.userManager.users["user_" + client.userID].compatibilityInfoObj = null;
			delete application.userManager.users["user_" + client.userID].compatibilityInfoObj;
			
			client.compatibilityInfoObj = null;
			delete client.compatibilityInfoObj;
		}
		
		application.userManager.users["user_" + client.userID] = null;
		delete application.userManager.users["user_" + client.userID];
	}
	
	client = null;
	//cleanClient = null;
	
	application.gc();
}


// remove any saved ignores for a user
function removeUserIgnores(acctID, userID, removeGuestsOnly)
{
	var hasChanged = false;
	
	//  TODO use userID for guest_, and acctID for member_
	if (acctID == 0)
	{
		//application.adminManager.userIgnoresSO.setProperty("guest_" + userName, null);
		application.adminManager.userIgnores["guest_" + userID] = null;
		delete application.adminManager.userIgnores["guest_" + userID];
		
		hasChanged = true;
	} else {
		if (!application.adminManager.userIgnores["member_" + acctID])
			return;
		
		if (removeGuestsOnly)
		{
			for (var i in application.adminManager.userIgnores["member_" + acctID])
			{
				if (application.adminManager.userIgnores["member_" + acctID][i].ignoredWhoAcctID == 0)
				{
					application.adminManager.userIgnores["member_" + acctID][i] = null;
					delete application.adminManager.userIgnores["member_" + acctID][i];
					
					hasChanged = true;
					
					trace("UserManager.removeUserIgnores->  <REMOVED>  " + i);
				}
			}
			
			i = null;
		} else {
			//application.adminManager.userIgnoresSO.setProperty("member_" + acctID, null);
			application.adminManager.userIgnores["member_" + acctID] = null;
			delete application.adminManager.userIgnores["member_" + acctID];
		}
	}
	
	if (hasChanged)
	{
		application.adminManager.userIgnoresSO.setProperty("userIgnores", application.adminManager.userIgnores);
		application.adminManager.userIgnoresSO.flush();
	}
	
	hasChanged = null;
	removeGuestsOnly = null;
	acctID = null;
	userName = null;
}


function forceRemoveClientObjByUserID(userID)
{
	if (!userID) return;
	
	for (var i in application.userManager.users)
	{
		if (application.userManager.users[i].userID == userID)
		{
			var targetClient = application.userManager.users["user_" + userID];
			
			if (targetClient)
			{
				trace("UserManager.forceRemoveClientObjByUserID->  <FOUND CLIENT:"+userID+">  "+targetClient+"\n"+
																"  acctID: "+targetClient.acctID+"\n"+
																"  acctName: "+targetClient.acctName+"\n"+
																"  userID: "+targetClient.userID+"\n"+
																"  userName: "+targetClient.userName+"\n"+
																"  client.id: "+targetClient.id+"\n"+
																"  clientID: "+targetClient.clientID);
				
				// find any other user objects with conflicting userNames
				/*for (var x in application.userManager.users)
				{
					if (application.userManager.users[x].userName == targetClient.userName)
						trace("UserManager.forceRemoveClientObjByUserID->  userID: " + userID + "  userName: " + targetClient.userName);
				}
				
				x = null;
				*/
				application.userManager.removeUser(targetClient);
			}
			
			targetClient = null;
		}
	}
	
	i = null;
	userID = null;
}


// get a clients Client object via their client.id
function getClientFromClientID(clientID, matchLastHalfOnly) /* returns a Client object */
{
	// exit if no clientID was given
	if (!clientID) return;
	
	// only match the last half of the clientID,
	// default to false if no initial value passed
	if ((matchLastHalfOnly == null)||
		(matchLastHalfOnly == undefined))
	{
		matchLastHalfOnly = false;
	}
	
	//trace("UserManager.getClientFromClientID->  <CALLED>  clientID: "+clientID+"  matchLastHalfOnly: "+matchLastHalfOnly);
	
	var clientObj = null;
	
	for (i = 0; i < application.clients.length; ++i)
	{
		//trace("UserManager.getClientFromClientID->  i: "+i+"  clients[i]: "+application.clients[i]+"  userName: "+application.clients[i].userName+"  userID: "+application.clients[i].userID+"  IP: "+application.clients[i].ip+"  id: "+application.clients[i].id+"  clientID: "+application.clients[i].clientID);
		
		if ((matchLastHalfOnly==false) && 
			(application.clients[i].clientID == clientID))
		{
			//trace("UserManager.getClientFromClientID->  <FOUND>  clientObj: "+application.clients[i]+"  clientID: "+application.clients[i].clientID+"  userName: "+application.clients[i].userName);
			
			clientObj = application.clients[i];
			
			break;
		}
		else if ((matchLastHalfOnly==true) && 
				(application.clients[i].clientID.substr(10, 18) == clientID))
		{
			//trace("UserManager.getClientFromClientID->  <FOUND:HalfMatch>  clientObj: "+application.clients[i]+"  clientID: "+application.clients[i].clientID+"  userName: "+application.clients[i].userName);
			
			clientObj = application.clients[i];
			
			break;
		}
	}
	
	//i = null;
	//matchLastHalfOnly = null;
	//clientID = null;
	
	//trace("UserManager.getClientFromClientID->  <RETURNING>  clientObj: "+clientObj);
	
	return clientObj;
}


// get a clients Client object via their acctID
function getClientFromAcctID(acctID) /* returns a Client object */
{
	var clientObj = null;
	
	if (!acctID.length) return;
	
	for (var i in application.userManager.users)
	{
		if (application.userManager.users[i].acctID == acctID)
		{
			clientObj = application.userManager.users[i];
			
			break;
		}
	}
	
	i = null;
	
	return clientObj;
}


// get a clients Client object via their acctName
function getClientFromAcctName(acctName) /* returns a Client object */
{
	var clientObj = null;
	
	if (!acctName.length) return;
	
	for (var i in application.userManager.users)
	{
		if (application.userManager.users[i].acctName == acctName)
		{
			clientObj = application.userManager.users[i];
			
			break;
		}
	}
	
	i = null;
	
	return clientObj;
}


// get a clients Client object via their userID
function getClientFromUserID(userID) /* returns a Client object */
{
	var clientObj = null;
	
	if (!userID.length) return;
	
	for (var i in application.userManager.users)
	{
		if (application.userManager.users[i].userID == userID)
		{
			clientObj = application.userManager.users[i];
			
			break;
		}
	}
	
	i = null;
	
	return clientObj;
}


// get a clients Client object via their userName
function getClientFromUserName(userName) /* returns a Client object */
{
	var clientObj = null;
	
	if (!userName.length) return;
	
	for (var i in application.userManager.users)
	{
		if (application.userManager.users[i].userName == userName)
		{
			clientObj = application.userManager.users[i];
			
			break;
		}
	}
	
	i = null;
	
	return clientObj;
}


// return the number of current connections from an IP
function getNumberOfConnectionsFromIP(userIP)
{
	if (!userIP.toString().length)
		return 0;
	
	var retVal = 0;
	
	for (var i = 0 ; i < application.clients.length; ++i)
	{
		if (application.clients[i].ip == userIP)
		{
			trace("i: "+i+"  clients[i]: "+application.clients[i]+"  clients[i].userName: "+application.clients[i].userName+"  clients[i].userID: "+application.clients[i].userID+"  clients[i].ip: "+application.clients[i].ip);
			retVal++;
		}
	}
	i = null;
	
	return retVal;
}



// check if all users in the userList (still) have a
// reference to an existing client.
function staleCloneCheck()
{
	//var tmpArr = application.userManager.usersSO.getPropertyNames();
	var tmpArr = application.userManager.users;
	
	//trace("UserManager.staleCloneCheck->  numClientsConnected: " + application.clients.length + "  tmpArr: " + tmpArr.toString());
	
	// for each item in tmpArr
	for (var i in tmpArr)
	{
		// if this object isnt the one were looking for, break.
		//if (!tmpArr[i].userID == )
		
		//var userNameMatches = (application.userManager.users[i].userName == tmpArr[i].userName);
		
		var clientObj = application.userManager.users["user_" + tmpArr[i].userID];
		
		//trace("UserManager.staleCloneCheck->  userID: " + tmpArr[i].userID + "  clientObj: " + clientObj);
		
		if (!clientObj.getStats())
		{
			trace("UserManager.staleCloneCheck->  <CLONE FOUND>  " + "\n" + 
												"  userID: "+clientObj.userID + "\n" + 
												"  userName: "+clientObj.userName + "\n" +  
												"  clientID: "+clientObj.clientID + "\n" +  
												"  Client.id: "+clientObj.id);
			
			// TEMP:
			// disconnect the user..
			forceRemoveClientObjByUserID(clientObj.userID);
			
			application.userManager.usersSO.setProperty("user_" + clientObj.userID, null);
			application.userManager.usersSO.flush();
			
			/*
			var tmpMsg = "<CLONE FOUND>";
			
			for (var x in clientObj)
			{
				tmpMsg += "\t\t\t" + x + ":  " + clientObj[x] + "\n";
					
				
				// TEMP:
				// cut off the Client.prototype classes leftover as properties
				if (clientObj[x].toString().toLowerCase().indexOf('function (') != -1)
					break;
			}
			
			tmpMsg += "\n";
			
			trace("UserManager.staleCloneCheck->  " + tmpMsg);
			
			x = null;
			tmpMsg = null;*/
		}
		
		clientObj = null;
	}
	
	i = null;
	tmpArr = null;
}


function informUserOfIgnores(client, ignoresObj)
{
	clearInterval(client.informUserOfIgnoresInterval);
	client.informUserOfIgnoresInterval = null;
	delete client.informUserOfIgnoresInterval;
	
	if (!ignoresObj)
		return;
	
	for (var i = 0 ; i < application.clients.length ; ++i)
	{
		var nodeName = (application.clients[i].acctID==0 ? "guest_"+application.clients[i].nonDuplicateName : "member_"+application.clients[i].acctID);
		
		//trace("###############informUserOfIgnores->\tnodeName: "+nodeName);
		
		if (ignoresObj[nodeName])
		{
			//trace("###############informUserOfIgnores->\tFOUND: "+application.clients[i].userName+"  <"+application.clients[i].nonDuplicateName+">");
			
			application.clients[i].call("ignoredUser", null, ignoresObj[nodeName]);
		}
		
		nodeName = null;
	}
	
	i = null;
	ignoresObj = null;
	client = null;
}


function informIgnoredUsers(client)
{
	clearInterval(client.informIgnoredUsersInterval);
	client.informIgnoredUsersInterval = null;
	delete client.informIgnoredUsersInterval;
	
	//trace("###############informIgnoredUsers->  userName: "+client.userName+"  <"+client.nonDuplicateName+">");
	
	for (var i in application.adminManager.userIgnores)
	{
		//trace("###############informIgnoredUsers->\t<i:"+i+":"+application.adminManager.userIgnores[i]+">");
		
		for (var x in application.adminManager.userIgnores[i])
		{
			//trace("###############informIgnoredUsers->\t<i:"+i+":"+application.adminManager.userIgnores[i]+">  <x:"+x+":"+application.adminManager.userIgnores[i][x]+">");
			
			if (((client.acctID==0) && 
				(application.adminManager.userIgnores[i][x].ignoredWhoName == client.nonDuplicateName)) || 
				((client.acctID!=0) && 
				(application.adminManager.userIgnores[i][x].ignoredWhoAcctID == client.acctID)))
			{
				//trace("###############informIgnoredUsers->\tFOUND: "+client.userName+"  <"+client.nonDuplicateName+">");
				
				client.call("ignoredUser", null, application.adminManager.userIgnores[i][x]);
			}
		}
		
		x = null;
	}
	
	i = null;
	client = null;
}




//get rid of all brackets that a user might have put in
function parseOutHTML(str)
{
	do{
		str = str.replace(/</, "&lt;");
	}
	while(str.indexOf("<") != -1);
	do{
		str = str.replace(/>/, "&gt;");
	}
	while(str.indexOf(">") != -1);
	// block &#xa;
	do{
		str = str.replace("&#","");
	}
	while(str.indexOf("&#") != -1);
	
	return str;
}
