/*
BongTVLive.com Hot Tub 2.0 beta6 by b0nghitter
*/


//trace("|###| MediaManager |###|>  Loading...");




function MediaManager()
{
	trace("|###| MediaManager |###|>  Loaded!");
	
	this.mediaSO = SharedObject.get("media", false);
}


// allow/deny subscribers to a private stream
MediaManager.prototype.userAskingPermissionToView = function(callerClientID, targetUserID)
{
	// TODO
}


MediaManager.prototype.userVideoOn = function(_userID)
{
	//trace("|###| MediaManager.userVideoOn |###|>  userID: "+_userID);
	
	application.userManager.users["user_"+_userID].isUsersVideoOn = true;
	
	var tmpObj = application.userManager.usersSO.getProperty("user_" + _userID);
	tmpObj.isUsersVideoOn = true;
	
	application.userManager.usersSO.setProperty("user_" + _userID, tmpObj);
	
	this.mediaSO.send("userVideoOn", _userID);
	
	tmpObj = null;
	_userID = null;
	
	//application.gc();
}


MediaManager.prototype.userVideoOff = function(_userID)
{
	//trace("|###| MediaManager.userVideoOff |###|>  userID: "+_userID);
	
	application.userManager.users["user_"+_userID].isUsersVideoOn = false;
	
	var tmpObj = application.userManager.usersSO.getProperty("user_" + _userID);
	tmpObj.isUsersVideoOn = false;
	
	application.userManager.usersSO.setProperty("user_" + _userID, tmpObj);
	application.userManager.usersSO.flush();
	
	this.mediaSO.send("userVideoOff", _userID);
	
	// remove any stale streams
	if ((!tmpObj.isUsersVideoOn) && 
		(!tmpObj.isUsersAudioOn))
	{
		userStream = Stream.get("user_"+_userID);
		userStream.clear();
		Stream.destroy(userStream);
		userStream = null;
	}
	
	tmpObj = null;
	_userID = null;
	
	//application.gc();
}


MediaManager.prototype.userAudioOn = function(_userID)
{
	//trace("|###| MediaManager.userAudioOn |###|>  userID: "+_userID);
	
	application.userManager.users["user_"+_userID].isUsersAudioOn = true;
	
	var tmpObj = application.userManager.usersSO.getProperty("user_" + _userID);
	tmpObj.isUsersAudioOn = true;
	
	application.userManager.usersSO.setProperty("user_" + _userID, tmpObj);
	application.userManager.usersSO.flush();
	
	this.mediaSO.send("userAudioOn", _userID);
	
	tmpObj = null;
	_userID = null;
	
	//application.gc();
}


MediaManager.prototype.userAudioOff = function(_userID)
{
	//trace("|###| MediaManager.userAudioOff |###|>  userID: "+_userID);
	
	application.userManager.users["user_"+_userID].isUsersAudioOn = false;
	
	var tmpObj = application.userManager.usersSO.getProperty("user_" + _userID);
	tmpObj.isUsersAudioOn = false;
	
	application.userManager.usersSO.setProperty("user_" + _userID, tmpObj);
	application.userManager.usersSO.flush();
	
	this.mediaSO.send("userAudioOff", _userID);
	
	// remove any stale streams
	if ((!tmpObj.isUsersVideoOn) && 
		(!tmpObj.isUsersAudioOn))
	{
		userStream = Stream.get("user_"+_userID);
		userStream.clear();
		Stream.destroy(userStream);
		userStream = null;
	}
	
	tmpObj = null;
	_userID = null;
	
	//application.gc();
}


// currently sent from each client, to each person 
// that client starts/stops viewing/listening to.. bad idea.
MediaManager.prototype.startViewingUser = function(callerClientID, targetUserID)
{
	//trace("|###| MediaManager.startViewingUser |###|>  callerClientID: "+callerClientID+"  targetUserID: "+targetUserID);
	
	var callerClientObj = application.userManager.getClientFromClientID(callerClientID);
	if (!callerClientObj) return; // anti-spoof
	
	var targetClientObj = application.userManager.users["user_" + targetUserID];
	
	//trace("|###| MediaManager.startViewingUser |###|>  userName: "+callerClientObj.userName+"  <STARTED VIEWING>  targetUserName: "+targetClientObj.userName);
	
	// add the callerClientObj.userID to the targets Client.viewedByUserIDs_A array
	if (targetClientObj.viewedByUserIDs_A.indexOf(callerClientObj.userID) == -1)
		targetClientObj.viewedByUserIDs_A.push(callerClientObj.userID);
	
	// tell the user that someone is viewing them
	if (targetClientObj)
	{
		// TEMP:
		// only affect beta users for now (v4x),
		// exit otherwise..
		if (targetClientObj.version.toString().charAt(0) == "3")
			return;
		
		//trace("|###| MediaManager.startViewingUser |###|>  targetClientObj: "+targetClientObj+"  targetClientObj.viewedByUserIDs_A: "+targetClientObj.viewedByUserIDs_A);
		application.userManager.users["user_" + targetUserID].call("userStartedViewing", null, {userID:callerClientObj.userID});
	}
	
	callerClientObj = null;
	targetClientObj = null;
	targetUserID = null;
	callerClientID = null;
	
	//application.gc();
}


MediaManager.prototype.stopViewingUser = function(callerClientID, targetUserID)
{
	var callerClientObj = application.userManager.getClientFromClientID(callerClientID);
	if (!callerClientObj) return; // anti-spoof
	
	var targetClientObj = application.userManager.users["user_" + targetUserID];
	
	//trace("|###| MediaManager.stopViewingUser |###|>  userName: "+callerClientObj.userName+"  <STOPPED VIEWING>  targetUserName: "+targetClientObj.userName);
	
	// splice the callerClientObj.userID from the targets Client.viewedByUserIDs_A array
	if (targetClientObj.viewedByUserIDs_A.indexOf(callerClientObj.userID) != -1)
		targetClientObj.viewedByUserIDs_A.splice(targetClientObj.viewedByUserIDs_A.indexOf(callerClientObj.userID),1);
	
	// tell the user that someone stopped viewing them
	if (application.userManager.users["user_" + targetUserID])
	{
		// TEMP:
		// only affect beta users for now (v4x),
		// exit otherwise..
		if (targetClientObj.version.toString().charAt(0) == "3")
			return;
		
		//trace("|###| MediaManager.stopViewingUser |###|>  targetClientObj: "+targetClientObj+"  targetClientObj.viewedByUserIDs_A: "+targetClientObj.viewedByUserIDs_A);
		application.userManager.users["user_" + targetUserID].call("userStoppedViewing", null, {userID:callerClientObj.userID});
	}
	
	callerClientObj = null;
	targetClientObj = null;
	targetUserID = null;
	callerClientID = null;
	
	//application.gc();
}


MediaManager.prototype.startListeningToUser = function(callerClientID, targetUserID)
{
	var callerClientObj = application.userManager.getClientFromClientID(callerClientID);
	if (!callerClientObj) return; // anti-spoof
	
	var targetClientObj = application.userManager.users["user_" + targetUserID];
	
	//trace("|###| MediaManager.startListeningToUser |###|>  userName: "+callerClientObj.userName+"  <STARTED LISTENING TO>  targetUserName: "+targetClientObj.userName);
	
	// add the callerClientObj.userID to the targets Client.heardByUserIDs_A array
	if (targetClientObj.heardByUserIDs_A.indexOf(callerClientObj.userID) == -1)
		targetClientObj.heardByUserIDs_A.push(callerClientObj.userID);
	
	// tell the user that someone is listening to them
	if (application.userManager.users["user_" + targetUserID])
	{
		// TEMP:
		// only affect beta users for now (v4x),
		// exit otherwise..
		if (targetClientObj.version.toString().charAt(0) == "3")
			return;
		
		//trace("|###| MediaManager.startListeningToUser |###|>  targetClientObj: "+targetClientObj+"  targetClientObj.heardByUserIDs_A: "+targetClientObj.heardByUserIDs_A);
		application.userManager.users["user_" + targetUserID].call("userStartedListening", null, {userID:callerClientObj.userID});
	}
	
	callerClientObj = null;
	targetClientObj = null;
	targetUserID = null;
	callerClientID = null;
	
	//application.gc();
}


MediaManager.prototype.stopListeningToUser = function(callerClientID, targetUserID)
{
	var callerClientObj = application.userManager.getClientFromClientID(callerClientID);
	if (!callerClientObj) return; // anti-spoof
	
	var targetClientObj = application.userManager.users["user_" + targetUserID];
	
	//trace("|###| MediaManager.stopListeningToUser |###|>  userName: "+callerClientObj.userName+"  <STOPPED LISTENING TO>  targetUserName: "+targetClientObj.userName);
	
	// splice the callerClientObj.userID from the targets Client.heardByUserIDs_A array
	if (targetClientObj.heardByUserIDs_A.indexOf(callerClientObj.userID) != -1)
		targetClientObj.heardByUserIDs_A.splice(targetClientObj.heardByUserIDs_A.indexOf(callerClientObj.userID),1);
	
	// tell the user that someone stopped listening to them
	if (application.userManager.users["user_" + targetUserID])
	{
		// TEMP:
		// only affect beta users for now (v4x),
		// exit otherwise..
		if (targetClientObj.version.toString().charAt(0) == "3")
			return;
		
		//trace("|###| MediaManager.stopListeningToUser |###|>  targetClientObj: "+targetClientObj+"  targetClientObj.heardByUserIDs_A: "+targetClientObj.heardByUserIDs_A);
		application.userManager.users["user_" + targetUserID].call("userStoppedListening", null, {userID:callerClientObj.userID});
	}
	
	callerClientObj = null;
	targetClientObj = null;
	targetUserID = null;
	callerClientID = null;
	
	//application.gc();
}


MediaManager.prototype.onPublish = function(client, streamObj)
{
	trace("|###| MediaManager.onPublish |###|>  client: "+client+"  streamName: "+streamObj.name+"  queryString: "+streamObj.publishQueryString);
	
	// the helper function extractQueryStringArg() is defined below
    delay = extractQueryStringArg(streamObj.pubishQueryString, "com.adobe.ams.maxQueueDelay");
    size = extractQueryStringArg(streamObj.publishQueryString, "com.adobe.ams.maxQueueSize");
	
	if (!size && !delay) return;
	
    trace("old maxQueueDelay : " + streamObj.maxQueueDelay);
    streamObj.maxQueueDelay = delay;
    trace("new maxQueueDelay : " + streamObj.maxQueueDelay);
	
    trace("old maxQueueSize : " + streamObj.maxQueueSize);
    streamObj.maxQueueSize = size;
    trace("new maxQueueSize : " + streamObj.maxQueueSize);
	
	streamObj = null;
	client = null;
}


MediaManager.prototype.onUnpublish = function(client, streamObj)
{
	trace("|###| MediaManager.onUnpublish |###|>  client: "+client+"  streamName: "+streamObj.name+"  queryString: "+streamObj.publishQueryString);
	
	streamObj = null;
	client = null;
}


MediaManager.prototype.createThumb = function(thumbData, thumbName) 
{
	//trace(thumbData);
	//this.thumbFile = new File(thumbName + ".jpg");
	//this.thumbFile.open("binary", "append");
	//this.thumbFile.writeBytes(thumbData);
	//this.thumbFile.close();
	thumbName = null;
	thumbData = null;
	//return "done";
}










function extractQueryStringArg(queryString, arg) 
{
	if ((!queryString) || (!queryString.length)) return;
	
    var retVal = "";
    temp = arg + "=";
	
    i = queryString.indexOf(temp);
	
    if (i != 0)
    {
        temp = "&" + arg + "=";
        i = queryString.indexOf(temp);
    }
	
    if (i != -1)
    {
        retVal = queryString.substr(i + temp.length);
        i = retVal.indexOf("&");
        if (i != -1)
        {
            retVal = retVal.substr(0, i);
        }
    }
	
    return retVal;
}


