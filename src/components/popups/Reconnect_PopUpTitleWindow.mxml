<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   preinitialize="preinitializeHandler(event)"
			   creationComplete="creationCompleteHandler(event)"
			   windowMoving="titleWin_windowMovingHandler(event)"
			   close="handleCloseEvent()" 
			   backgroundColor="#249F18" 
			   title="Connection Lost"
			   width="400" height="200">
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"
						  verticalAlign="middle"
						  gap="0"/>
	</s:layout>
	
	<s:states>
		<s:State name="default"/>
	</s:states>
	
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Alert;
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.BitmapImage;
			
			import events.CustomEvent;
			
			import me.whohacked.app.AppWideDebug_Singleton;
			import me.whohacked.app.AppWideEventDispatcher_Singleton;
			import me.whohacked.app.AppWide_Singleton;
			import me.whohacked.app.IconManager_Singleton;
			
			
			[Bindable]
			private var __iconManager:IconManager_Singleton;
			private var __appWideSingleton:AppWide_Singleton;
			private var __appWideEventDispatcher:AppWideEventDispatcher_Singleton;
			private var __reconnectTimer:Timer;
			private var __reconnectTimerCount:int = 5;
			
			
			
			private function preinitializeHandler(event:FlexEvent):void
			{
				__iconManager = IconManager_Singleton.getInstance();
				__appWideSingleton = AppWide_Singleton.getInstance();
				__appWideEventDispatcher = AppWideEventDispatcher_Singleton.getInstance();
				
				event = null;
			}
			
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				parentApplication.lobby.openPopUps_AC.addItem(this);
				
				PopUpManager.centerPopUp(this);
				
				counter_L.text = "Reconnecting in: "+__reconnectTimerCount;
				
				// TODO start reconnect timer
				__reconnectTimer = new Timer(1000, __reconnectTimerCount);
				__reconnectTimer.addEventListener(TimerEvent.TIMER, reconnectTimer_tickHandler, false,0,true);
				__reconnectTimer.addEventListener(TimerEvent.TIMER_COMPLETE, reconnectTimer_completeHandler, false,0,true);
				__reconnectTimer.start();
				
				event = null;
			}
			
			
			private function reconnectTimer_tickHandler(event:TimerEvent):void
			{
				// set label text
				__reconnectTimerCount--;
				
				if (__reconnectTimerCount>0)
					counter_L.text = "Reconnecting in: "+__reconnectTimerCount;
				else
					counter_L.text = "Reconnecting...";
				
				event = null;
			}
			
			
			private function reconnectTimer_completeHandler(event:TimerEvent):void
			{
				event = null;
				
				__reconnectTimer.stop();
				
				__appWideSingleton.loggedOut = true;
				
				// reconnect
				parentApplication.loginPanel.loginBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, false,false));
				
				handleCloseEvent();
			}
			
			
			private function connectBtn_clickHandler(event:MouseEvent):void
			{
				event = null;
				
				__reconnectTimer.stop();
				
				__appWideSingleton.loggedOut = true;
				
				// TODO reconnect
				parentApplication.loginPanel.loginBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, false,false));
				
				handleCloseEvent();
			}
			
			
			private function cancelBtn_clickHandler(event:MouseEvent):void
			{
				event = null;
				
				__reconnectTimer.stop();
				
				__appWideSingleton.loggedOut = true;
				
				handleCloseEvent();
			}
			
			
			// Handle the close button and Cancel button.
			private function handleCloseEvent():void
			{
				parentApplication.lobby.openPopUps_AC.removeItemAt(parentApplication.lobby.openPopUps_AC.getItemIndex(this));
				
				__iconManager = null;
				__appWideSingleton = null;
				__appWideEventDispatcher = null;
				
				PopUpManager.removePopUp(this);
			}
			
			
			private function titleWin_windowMovingHandler(event:TitleWindowBoundsEvent):void
			{
				if (event.afterBounds.left < 0)
				{
					event.afterBounds.left = 0;
				} else if (event.afterBounds.right > systemManager.stage.stageWidth) {
					event.afterBounds.left = systemManager.stage.stageWidth - event.afterBounds.width;
				}
				if (event.afterBounds.top < 0)
				{
					event.afterBounds.top = 0;
				} else if (event.afterBounds.bottom > systemManager.stage.stageHeight) {
					event.afterBounds.top = systemManager.stage.stageHeight - event.afterBounds.height;
				}
				
				event = null;
			}
			
			
			
			
			
			
			
			
			
			
			
			private function debugMsg(str:String):void
			{
				AppWideDebug_Singleton.getInstance().newDebugMessage(this.id, str);
				str = null;
			}
			
			
		]]>
	</fx:Script>
	
	
	
	<s:Spacer height="10"/>
	
	
	<s:Label id="counter_L" fontSize="16"/>
	
	
	<s:Spacer height="10"/>
	
	
	<s:HGroup width="100%" height="100%" 
			  horizontalAlign="center"
			  verticalAlign="middle">
		
		<s:Button width="100%" height="100%" 
				  id="connectBtn" label="CONNECT" fontSize="16"
				  click="connectBtn_clickHandler(event)"/>
		
		<s:Button width="100%" height="100%" 
				  id="cancelBtn" label="CANCEL" opaqueBackground="#FF0000" color="#FF0000"
				  click="cancelBtn_clickHandler(event)"/>
		
	</s:HGroup>
		
	
	
	
</s:TitleWindow>