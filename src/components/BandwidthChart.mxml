<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  preinitialize="preinitializeHandler(event)"
		  creationComplete="creationCompleteHandler(event)"
		  stateChangeComplete="stateChangeCompleteHandler(event)"
		  enabled="{showBWChart}" 
		  visible="{showBWChart}" 
		  horizontalAlign="center" 
		  verticalAlign="middle" 
		  gap="5">
	
	
	
	<s:states>
		<s:State name="server"/>
		<s:State name="camSpot"/>
	</s:states>
	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import events.CustomEvent;
			
			import me.whohacked.app.AppWideDebug_Singleton;
			import me.whohacked.app.AppWideEventDispatcher_Singleton;
			import me.whohacked.app.AppWide_Singleton;
			
			
			[Bindable]
			public var showBWChart:Boolean = false;
			[Bindable]
			public var showCamSpotStats:Boolean = false;
			
			[Bindable]
			public var bwChart_DP:ArrayCollection;
			
			[Bindable]
			private var __statsTimer:Timer;
			private var __appWideSingleton:AppWide_Singleton;
			
			
			
			private function preinitializeHandler(event:FlexEvent):void
			{
				__appWideSingleton = AppWide_Singleton.getInstance();
				__statsTimer = __appWideSingleton.statsTimer;
				
				bwChart_DP = new ArrayCollection([{camSpotID:"", currentBytesPerSecond:0, maxBytesPerSecond:0, byteCount:0, streamTime:0}]);
				
				event = null;
			}
			
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				bwChart.dataProvider = bwChart_DP;
				
				/*
				for (var i:int = 0; i < bwChart_DP.length; i++) 
				{
					if (bwChart_DP[i].camSpotID == "camSpot_6")
					{
						break;
					}
				}
				*/
				
				AppWideEventDispatcher_Singleton.getInstance().addEventListener("doBWCheck", doBWCheck, false,0,true);
				AppWideEventDispatcher_Singleton.getInstance().addEventListener("onBWDone", onBWDoneHandler, false,0,true);
				
				bwPing_L.text = '0';
				
				event = null;
			}
			
			
			private function stateChangeCompleteHandler(event:FlexEvent):void
			{
				//trace(this.id + " | stateChangeCompleteHandler->  currentState: " + this.currentState);
				
				bwChart_DP.removeAll();
				
				// add a dummy item
				if (this.currentState == "camSpot")
					bwChart_DP.addItem({camSpotID:"", currentBytesPerSecond:0, maxBytesPerSecond:0, byteCount:0, streamTime:0});
				
				event = null;
			}
			
			
			private function bwStats_RB_valueCommitHandler(event:FlexEvent):void
			{
				if (event.target.selected)
				{
					var state:String = event.target.id.split("_", 2)[1];
					//trace(this.id + " | bwStats_RB_valueCommitHandler->  SELECTED: " + event.target.id + "  state: " + state);
					
					setCurrentState(state, false);
					
					state = null;
				}
				
				event = null;
			}
			
			
			private function getBWChartData(series:LineSeries, item:Object, fieldName:String):Object
			{
				if (!__appWideSingleton.appInfoObj['showBWChart'])
					return(0);
				
				var retVal:* = null; // TODO
				var bytes_str:String;
				var bytes_str_A:Array;
				
				if (bwChart_DP.length >= 60)
					bwChart_DP.removeItemAt(0);
				
				if ((item.connectionDuration == 0) || 
					(item.streamTime == 0))
					return(0);
				
				if (series.id == 'bwChart_lineSeries1')
				{
					if (fieldName == 'yValue')
					{
						if (this.currentState == 'server')
						{
							// bw_out, server->client
							series.displayName = "In:  " + Math.round(item.bw_out/1000) + " KB/s";
							
							bwChartLegend_itemLabel1.text = series.displayName;
							
							return(item.bw_out);
						}
						if (this.currentState == 'camSpot')
						{
							/*
							// limit decimals to the first 3 chars after the .
							bytes_str = item.maxBytesPerSecond.toString();
							bytes_str_A = bytes_str.split(".");
							if (bytes_str_A.length > 1)
							bytes_str = bytes_str_A[0] +"."+ bytes_str_A[1].toString().substr(0, 3);
							bytes_str_A = null;
							bytes_str = null;
							*/
							series.displayName = "Max:  " + Math.round(item.maxBytesPerSecond/1000) + " KB/s";
							
							bwChartLegend_itemLabel1.text = series.displayName;
							
							return(item.maxBytesPerSecond);
						}
					} else if (fieldName == "xValue") {
						if (this.currentState == 'server')
						{
							return(item.connectionDuration);
						}
						if (this.currentState == 'camSpot')
						{
							return(item.streamTime);
						}
					}
				}
				
				if (series.id == 'bwChart_lineSeries2')
				{
					if (fieldName == 'yValue')
					{
						if (this.currentState == 'server')
						{
							// bw_in, client->server
							series.displayName = "Out:  " + Math.round(item.bw_in/1000) + " KB/s";
							
							bwChartLegend_itemLabel2.text = series.displayName;
							
							return(item.bw_in);
						}
						if (this.currentState == 'camSpot')
						{
							/*
							// limit decimals to the first 3 chars after the .
							bytes_str = item.currentBytesPerSecond.toString();
							bytes_str_A = bytes_str.split(".");
							if (bytes_str_A.length > 1)
							bytes_str = bytes_str_A[0] +"."+ bytes_str_A[1].toString().substr(0, 3);
							bytes_str_A = null;
							bytes_str = null;
							*/
							series.displayName = "Current:  " + Math.round(item.currentBytesPerSecond/1000) + " KB/s";
							
							bwChartLegend_itemLabel2.text = series.displayName;
							
							return(item.currentBytesPerSecond);
						}
					} else if (fieldName == "xValue") {
						if (this.currentState == 'server')
						{
							return(item.connectionDuration);
						}
						if (this.currentState == 'camSpot')
						{
							return(item.streamTime);
						}
					}
				}
				
				bytes_str_A = null;
				bytes_str = null;
				return retVal;
			} 
			
			
			
			
			public function doBWCheck(event:Event):Number
			{
				//trace("bwChart.doBWCheck->  ");
				
				/*
				// get the bandwidth limit from the server
				var responder:Responder = new Responder(getBandwidthLimitResponder);
				
				function getBandwidthLimitResponder(info:Object):void
				{
					debugMsg("getBandwidthLimitResponder->  " + info);
					for (var i:String in info) { trace(i + " - " + info[i]); }
				}
				
				parentApplication.loginPanel.nc.call("getBandwidthLimit", responder, 0);
				*/
				
				bwLimit_L.text = 'Checking...';
				
				event = null;
				
				return 0;
			}
			
			
			private function onBWDoneHandler(event:CustomEvent):void
			{
				//debugMsg("onBWDoneHandler->  CALLED");
				
				var bitrate:Number;
				if (event.eventObj.bitrate > 0)
				{
					bitrate = event.eventObj.bitrate;
				}
				
				debugMsg("onBWDoneHandler->  BANDWIDTH  "+bitrate+" Kbit/s,  "+Math.round(0.125*bitrate) + " KB/s");
				
				bwLimit_L.text = Math.round(0.125*bitrate) + " KB/s";
				
				doBWCheck_Btn.enabled = true;
				
				event = null;
			}
			
			
			public function setPing(ping:String):void
			{
				bwPing_L.text = ping;
				
				ping = null;
			}
			
			
			
			
			
			
			
			
			private function debugMsg(str:String):void
			{
				AppWideDebug_Singleton.getInstance().newDebugMessage(this.id, str);
				
				str = null;
			}
			
			
		]]>
	</fx:Script>
	
	
	
	
	
	<!-- ping -->
	<s:HGroup width="70">
		
		<s:Label text="Ping: "
				 fontSize="12" 
				 fontWeight="bold"/>
		<s:Label id="bwPing_L"
				 fontSize="12" 
				 text=""/>
		
	</s:HGroup>
	
	
	
	
	
	<!-- move bw check here -->
	<s:VGroup width="65">
		<s:Button id="doBWCheck_Btn" 
				  width="100%" 
				  enabled="false" 
				  label="CheckBW" 
				  click="doBWCheck_Btn.enabled=false;AppWideEventDispatcher_Singleton.getInstance().dispatchEvent(new Event('doBWCheck', false, false))"/>
		
		<s:Label id="bwLimit_L"
				 text="0 KB/s" 
				 textAlign="center" 
				 fontSize="11"/>
	</s:VGroup>
	
	
	
	
	
	
	
	<mx:LineChart id="bwChart"
				  height="90%" maxWidth="150"
				  showAllDataTips="false">
		
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="bwChart_horizontalAxis" 
							 ticksBetweenLabels="false" 
							 categoryField.server="connectionDuration"
							 categoryField.camSpot="streamTime"/>
		</mx:horizontalAxis>
		
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{bwChart_horizontalAxis}"
							 tickPlacement="none" 
							 showLabels="false" 
							 showLine="false"/>
		</mx:horizontalAxisRenderers>
		
		<!--
		<mx:verticalAxisRenderers>
		<mx:AxisRenderer axis="{bwChart_horizontalAxis}" showLabels="false"/>
		</mx:verticalAxisRenderers>
		-->
		
		<mx:seriesFilters>
			<fx:Array/>
		</mx:seriesFilters>
		
		<mx:series>
			
			<!-- dataFunction="getBWChartData" -->
			<mx:LineSeries id="bwChart_lineSeries1" 
						   dataFunction="getBWChartData"
						   displayName.camSpot="maxBytes/s" 
						   xField.camSpot="streamTime" yField.camSpot="maxBytesPerSecond" 
						   displayName.server="bw_out" 
						   xField.server="connectionDuration" yField.server="bw_out" 
						   lineSegmentRenderer="mx.charts.renderers.ShadowLineRenderer">
				<mx:lineStroke>
					<mx:SolidColorStroke id="bwChart_lineSeries1_lineStroke"
										 color="0xFF0000" 
										 weight="2" 
										 alpha=".8"/>
				</mx:lineStroke>
			</mx:LineSeries>
			
			<mx:LineSeries id="bwChart_lineSeries2" 
						   dataFunction="getBWChartData"
						   displayName.camSpot="currentBytes/s"
						   xField.camSpot="streamTime" yField.camSpot="currentBytesPerSecond" 
						   displayName.server="bw_in" 
						   xField.server="connectionDuration" yField.server="bw_in" 
						   lineSegmentRenderer="mx.charts.renderers.ShadowLineRenderer">
				<mx:lineStroke>
					<mx:SolidColorStroke id="bwChart_lineSeries2_lineStroke"
										 color="0x009900" 
										 weight="2" 
										 alpha=".8"/>
				</mx:lineStroke>
			</mx:LineSeries>
			
		</mx:series>
		
	</mx:LineChart>
	
	<!--
	<mx:Legend id="bwChartLegend" 
	height="100%" 
	verticalGap="0"
	dataProvider="bwChart">
	</mx:Legend>
	-->
	
	<!-- legend -->
	<s:VGroup height="100%" gap="0" 
			  horizontalAlign="center" 
			  verticalAlign="middle">
		
		<s:HGroup height="100%"
				  horizontalAlign="center"
				  verticalAlign="middle"
				  gap="2">
			
			<s:Rect width="10" height="10">
				<s:fill>
					<s:SolidColor color="0xFF0000"/>
				</s:fill>
			</s:Rect>
			
			<s:Label id="bwChartLegend_itemLabel1"
					 fontSize="10"/>
			
		</s:HGroup>
		
		<s:HGroup height="100%"
				  horizontalAlign="center"
				  verticalAlign="middle"
				  gap="2">
			
			<s:Rect width="10" height="10">
				<s:fill>
					<s:SolidColor color="0x009900"/>
				</s:fill>
			</s:Rect>
			
			<s:Label id="bwChartLegend_itemLabel2"
					 fontSize="10"/>
			
		</s:HGroup>
		
	</s:VGroup>
	
	
	<!--
	<s:Spacer width="20" height="100%"/>
	-->
	
	
	<s:VGroup height="100%" 
			  paddingRight="10" gap="0" 
			  horizontalAlign="right" 
			  verticalAlign="middle"
			  visible="{showCamSpotStats}"
			  includeInLayout="{showCamSpotStats}">
		
		<s:RadioButton id="bwStats_server_RB"
					   height="15"
					   valueCommit="bwStats_RB_valueCommitHandler(event)"
					   label="Server" 
					   fontSize="10" 
					   fontWeight="normal" 
					   fontFamily="Arial" 
					   layoutDirection="rtl"
					   selected.server="true"/>
		
		<s:RadioButton id="bwStats_camSpot_RB"
					   height="15"
					   valueCommit="bwStats_RB_valueCommitHandler(event)"
					   label="CamSpot" 
					   fontSize="10" 
					   fontWeight="normal" 
					   fontFamily="Arial" 
					   layoutDirection="rtl"
					   selected.camSpot="true"/>
		
	</s:VGroup>
	
	
	
	
</s:HGroup>